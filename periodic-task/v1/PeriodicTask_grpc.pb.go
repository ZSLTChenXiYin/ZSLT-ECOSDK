// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/periodictask/v1/PeriodicTask.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PeriodicTask_ServiceRegistry_FullMethodName         = "/api.periodictask.v1.PeriodicTask/ServiceRegistry"
	PeriodicTask_CreatePeriodicTaskQueue_FullMethodName = "/api.periodictask.v1.PeriodicTask/CreatePeriodicTaskQueue"
	PeriodicTask_StartPeriodicTaskQueue_FullMethodName  = "/api.periodictask.v1.PeriodicTask/StartPeriodicTaskQueue"
	PeriodicTask_CreateTask_FullMethodName              = "/api.periodictask.v1.PeriodicTask/CreateTask"
	PeriodicTask_GetTaskList_FullMethodName             = "/api.periodictask.v1.PeriodicTask/GetTaskList"
	PeriodicTask_CompleteTask_FullMethodName            = "/api.periodictask.v1.PeriodicTask/CompleteTask"
)

// PeriodicTaskClient is the client API for PeriodicTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeriodicTaskClient interface {
	ServiceRegistry(ctx context.Context, in *ServiceRegistryRequest, opts ...grpc.CallOption) (*ServiceRegistryReply, error)
	CreatePeriodicTaskQueue(ctx context.Context, in *CreatePeriodicTaskQueueRequest, opts ...grpc.CallOption) (*CreatePeriodicTaskQueueReply, error)
	StartPeriodicTaskQueue(ctx context.Context, in *StartPeriodicTaskQueueRequest, opts ...grpc.CallOption) (*StartPeriodicTaskQueueReply, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error)
	GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*GetTaskListReply, error)
	CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*CompleteTaskReply, error)
}

type periodicTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewPeriodicTaskClient(cc grpc.ClientConnInterface) PeriodicTaskClient {
	return &periodicTaskClient{cc}
}

func (c *periodicTaskClient) ServiceRegistry(ctx context.Context, in *ServiceRegistryRequest, opts ...grpc.CallOption) (*ServiceRegistryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceRegistryReply)
	err := c.cc.Invoke(ctx, PeriodicTask_ServiceRegistry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicTaskClient) CreatePeriodicTaskQueue(ctx context.Context, in *CreatePeriodicTaskQueueRequest, opts ...grpc.CallOption) (*CreatePeriodicTaskQueueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePeriodicTaskQueueReply)
	err := c.cc.Invoke(ctx, PeriodicTask_CreatePeriodicTaskQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicTaskClient) StartPeriodicTaskQueue(ctx context.Context, in *StartPeriodicTaskQueueRequest, opts ...grpc.CallOption) (*StartPeriodicTaskQueueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartPeriodicTaskQueueReply)
	err := c.cc.Invoke(ctx, PeriodicTask_StartPeriodicTaskQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicTaskClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskReply)
	err := c.cc.Invoke(ctx, PeriodicTask_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicTaskClient) GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*GetTaskListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskListReply)
	err := c.cc.Invoke(ctx, PeriodicTask_GetTaskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *periodicTaskClient) CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*CompleteTaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteTaskReply)
	err := c.cc.Invoke(ctx, PeriodicTask_CompleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeriodicTaskServer is the server API for PeriodicTask service.
// All implementations must embed UnimplementedPeriodicTaskServer
// for forward compatibility.
type PeriodicTaskServer interface {
	ServiceRegistry(context.Context, *ServiceRegistryRequest) (*ServiceRegistryReply, error)
	CreatePeriodicTaskQueue(context.Context, *CreatePeriodicTaskQueueRequest) (*CreatePeriodicTaskQueueReply, error)
	StartPeriodicTaskQueue(context.Context, *StartPeriodicTaskQueueRequest) (*StartPeriodicTaskQueueReply, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error)
	GetTaskList(context.Context, *GetTaskListRequest) (*GetTaskListReply, error)
	CompleteTask(context.Context, *CompleteTaskRequest) (*CompleteTaskReply, error)
	mustEmbedUnimplementedPeriodicTaskServer()
}

// UnimplementedPeriodicTaskServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPeriodicTaskServer struct{}

func (UnimplementedPeriodicTaskServer) ServiceRegistry(context.Context, *ServiceRegistryRequest) (*ServiceRegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRegistry not implemented")
}
func (UnimplementedPeriodicTaskServer) CreatePeriodicTaskQueue(context.Context, *CreatePeriodicTaskQueueRequest) (*CreatePeriodicTaskQueueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeriodicTaskQueue not implemented")
}
func (UnimplementedPeriodicTaskServer) StartPeriodicTaskQueue(context.Context, *StartPeriodicTaskQueueRequest) (*StartPeriodicTaskQueueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPeriodicTaskQueue not implemented")
}
func (UnimplementedPeriodicTaskServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedPeriodicTaskServer) GetTaskList(context.Context, *GetTaskListRequest) (*GetTaskListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskList not implemented")
}
func (UnimplementedPeriodicTaskServer) CompleteTask(context.Context, *CompleteTaskRequest) (*CompleteTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedPeriodicTaskServer) mustEmbedUnimplementedPeriodicTaskServer() {}
func (UnimplementedPeriodicTaskServer) testEmbeddedByValue()                      {}

// UnsafePeriodicTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeriodicTaskServer will
// result in compilation errors.
type UnsafePeriodicTaskServer interface {
	mustEmbedUnimplementedPeriodicTaskServer()
}

func RegisterPeriodicTaskServer(s grpc.ServiceRegistrar, srv PeriodicTaskServer) {
	// If the following call pancis, it indicates UnimplementedPeriodicTaskServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PeriodicTask_ServiceDesc, srv)
}

func _PeriodicTask_ServiceRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicTaskServer).ServiceRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicTask_ServiceRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicTaskServer).ServiceRegistry(ctx, req.(*ServiceRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicTask_CreatePeriodicTaskQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePeriodicTaskQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicTaskServer).CreatePeriodicTaskQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicTask_CreatePeriodicTaskQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicTaskServer).CreatePeriodicTaskQueue(ctx, req.(*CreatePeriodicTaskQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicTask_StartPeriodicTaskQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPeriodicTaskQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicTaskServer).StartPeriodicTaskQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicTask_StartPeriodicTaskQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicTaskServer).StartPeriodicTaskQueue(ctx, req.(*StartPeriodicTaskQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicTask_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicTaskServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicTask_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicTaskServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicTask_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicTaskServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicTask_GetTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicTaskServer).GetTaskList(ctx, req.(*GetTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeriodicTask_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeriodicTaskServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeriodicTask_CompleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeriodicTaskServer).CompleteTask(ctx, req.(*CompleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeriodicTask_ServiceDesc is the grpc.ServiceDesc for PeriodicTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeriodicTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.periodictask.v1.PeriodicTask",
	HandlerType: (*PeriodicTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceRegistry",
			Handler:    _PeriodicTask_ServiceRegistry_Handler,
		},
		{
			MethodName: "CreatePeriodicTaskQueue",
			Handler:    _PeriodicTask_CreatePeriodicTaskQueue_Handler,
		},
		{
			MethodName: "StartPeriodicTaskQueue",
			Handler:    _PeriodicTask_StartPeriodicTaskQueue_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _PeriodicTask_CreateTask_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _PeriodicTask_GetTaskList_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _PeriodicTask_CompleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/periodictask/v1/PeriodicTask.proto",
}
